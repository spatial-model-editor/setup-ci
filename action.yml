name: 'setup-ci'
description: 'Sets up a toolchain on CI for building spatial-model-editor'
inputs:
  extra-deps:
    description: 'Additional dependencies to install'
    required: false
    default: ''
runs:
  using: "composite"
  steps:

    - if: runner.os == 'Linux'
      shell: bash
      env:
        CCACHE_VERSION: '4.9.1'
        CLANG_VERSION: '18'
      run: |
        # set environment variables
        echo "INSTALL_PREFIX=/opt/smelibs" >> $GITHUB_ENV
        echo "SUDO_CMD=sudo" >> $GITHUB_ENV
        echo "TARGET_TRIPLE=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
        echo "HOST_TRIPLE=x86_64-unknown-linux-gnu" >> $GITHUB_ENV

        echo "PYTHON_EXE=/usr/bin/python3" >> $GITHUB_ENV
        echo "OS=linux" >> $GITHUB_ENV
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

        # add llvm repo for clang
        sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${CLANG_VERSION} main"
        sudo apt update -yy

        # install clang, ninja, qt build deps, and any extra dependencies
        sudo apt install -yy clang-${CLANG_VERSION} llvm-${CLANG_VERSION} lld-${CLANG_VERSION} libclang-rt-${CLANG_VERSION}-dev libclang-dev ninja-build xvfb jwm lcov libglu1-mesa-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxkbcommon-dev libxkbcommon-x11-dev '^libxcb.*-dev' ${{ inputs.extra-deps }}

        # set default clang version
        sudo update-alternatives --remove-all clang || echo "nothing to remove"
        sudo update-alternatives --remove-all clang++ || echo "nothing to remove"
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100
        clang++ --version

        # disable system blas/lapack
        sudo rm /usr/lib/x86_64-linux-gnu/libblas*
        sudo rm /usr/lib/x86_64-linux-gnu/liblapack*

        # get a recent version of ccache
        wget https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        tar -xf ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        sudo cp ccache-${CCACHE_VERSION}-linux-x86_64/ccache /usr/bin/ccache
        rm -rf ccache-${CCACHE_VERSION}-linux-x86_64
        rm -f ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        ccache --version

        # set maximum ccache size to 400MB
        ccache --max-size 400M
        ccache --cleanup
        ccache --zero-stats
        ccache --show-stats
    - if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: '~/.cache/ccache'
        key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ github.job }}-${{ runner.os }}-

    - if: runner.os == 'macOS'
      shell: bash
      run: |
        # set environment variables
        echo "INSTALL_PREFIX=/opt/smelibs" >> $GITHUB_ENV
        echo "SUDO_CMD=sudo" >> $GITHUB_ENV
        echo "TARGET_TRIPLE=x86_64-apple-darwin16" >> $GITHUB_ENV
        echo "HOST_TRIPLE=x86_64-apple-darwin16" >> $GITHUB_ENV
        echo "PYTHON_EXE=/usr/bin/python3" >> $GITHUB_ENV
        echo "OS=osx" >> $GITHUB_ENV
        echo "MACOSX_DEPLOYMENT_TARGET=11" >> $GITHUB_ENV

        # install required tools and any extra dependencies
        brew install ninja bison flex ccache ${{ inputs.extra-deps }}
        echo "/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH" > $GITHUB_PATH

        # set maximum ccache size to 400MB
        ccache --max-size 400M
        ccache --cleanup
        ccache --zero-stats
        ccache --show-stats
    - if: runner.os == 'macOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.3'
    - if: runner.os == 'macOS'
      uses: actions/cache@v4
      with:
        path: '/Users/runner/Library/Caches/ccache'
        key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ github.job }}-${{ runner.os }}-

    - if: runner.os == 'Windows'
      shell: bash
      run: |
        # set environment variables
        echo "INSTALL_PREFIX=/c/smelibs" >> $GITHUB_ENV
        echo "SUDO_CMD=" >> $GITHUB_ENV
        echo "TARGET_TRIPLE=x86_64-w64-windows-gnu" >> $GITHUB_ENV
        echo "HOST_TRIPLE=x86_64-w64-mingw64" >> $GITHUB_ENV
        echo "PYTHON_EXE=/ucrt64/bin/python" >> $GITHUB_ENV
        echo "OS=win64-mingw" >> $GITHUB_ENV
    - if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-python mingw-w64-ucrt-x86_64-ninja mingw-w64-ucrt-x86_64-git-lfs mingw-w64-ucrt-x86_64-ccache make m4 git dos2unix diffutils flex bison ${{ inputs.extra-deps }}
    - if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # set maximum ccache size to 400MB
        ccache --max-size 400M
        ccache --cleanup
        ccache --zero-stats
        ccache --show-stats
    - if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: 'C:\Users\runneradmin\AppData\Local\ccache'
        key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ github.job }}-${{ runner.os }}-
    - if: runner.os == 'Windows'
      name: Install Mesa 3D to get OpenGL support on Windows without a GPU
      uses: ssciwr/setup-mesa-dist-win@v2
      with:
        version: "24.0.5"

    - if: runner.os != 'Windows'
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # temporary install of cmake 3.29.2 due to dune cmake issue with 3.29.1 (msys already has 3.29.2)
    - if: runner.os != 'Windows'
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: "3.29.2"
